package net.colinjohnson.vis.grid;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class Grid<T extends GridNode> {
    private List<List<T>> grid;
    private final GridNodeSupplier<T> defaultNodeSupplier;

    public Grid(GridNodeSupplier<T> defaultNodeSupplier, int width, int height) {
        if (width < 1 || height < 1) {
            throw new IllegalArgumentException("Grid width and height must be > 1.");
        }
        this.defaultNodeSupplier = defaultNodeSupplier;
        clearGrid(width, height);
    }

    /**
     * Resets the grid and fills it with default nodes, as generated by the {@code defaultNodeSupplier}.
     */
    public void clearGrid(int width, int height) {
        grid = new ArrayList<>();
        for (int x = 0; x < width; x++) {
            List<T> column = new ArrayList<>();
            grid.add(column);
            for (int y = 0; y < height; y++) {
                column.add(defaultNodeSupplier.get(x, y));
            }
        }
    }

    public void setNode(T node) {
        if (withinGrid(node.getX(), node.getY())) {
            throw new IllegalArgumentException("Node is not within the grid boundary.");
        }
        grid.get(node.getX()).set(node.getY(), node);
    }

    public T getNode(int x, int y) {
        if (!withinGrid(x, y)) {
            throw new IndexOutOfBoundsException("Specified coordinates are outside of the grid");
        }
        return grid.get(x).get(y);
    }

    public Optional<T> getNodeOptional(int x, int y) {
        if (!withinGrid(x, y)) {
            return Optional.empty();
        }
        return Optional.of(getNode(x, y));
    }

    public boolean withinGrid(int x, int y) {
        return (x >= 0 && x < getWidth() && y >= 0 && y < getHeight());
    }

    public int getWidth() {
        return grid.size();
    }

    public int getHeight() {
        return grid.get(0).size();
    }
}
