package net.colinjohnson.vis.grid;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * A grid of nodes.
 *
 * @param <N> The type of node in the grid.
 */
public class Grid<N extends GridNode> {
    private List<List<N>> grid;
    private final GridNodeSupplier<N> defaultNodeSupplier;

    /**
     * Creates a new grid with the specified width and height, filled with default nodes, as generated by the
     * {@code defaultNodeSupplier}.
     */
    public Grid(GridNodeSupplier<N> defaultNodeSupplier, int width, int height) {
        if (width < 1 || height < 1) {
            throw new IllegalArgumentException("Grid width and height must be > 1.");
        }
        this.defaultNodeSupplier = defaultNodeSupplier;
        clearGrid(width, height);
    }

    /**
     * Resets the grid and fills it with default nodes.
     */
    public void clearGrid(int width, int height) {
        grid = new ArrayList<>();
        for (int x = 0; x < width; x++) {
            List<N> column = new ArrayList<>();
            grid.add(column);
            for (int y = 0; y < height; y++) {
                column.add(defaultNodeSupplier.get(x, y));
            }
        }
    }

    /**
     * @return the node at the specified coordinates.
     * @throws IndexOutOfBoundsException if the specified coordinates are outside the grid.
     */
    public N getNode(int x, int y) {
        if (outOfBounds(x, y)) {
            throw new IndexOutOfBoundsException("Specified coordinates are outside of the grid");
        }
        return grid.get(x).get(y);
    }

    /**
     * @return The node at the specified coordinates, or {@code Optional.empty} if the coordinates are outside the grid.
     */
    public Optional<N> getNodeOptional(int x, int y) {
        if (outOfBounds(x, y)) {
            return Optional.empty();
        }
        return Optional.of(getNode(x, y));
    }

    /**
     * @return True if the specified coordinates are outside the grid.
     */
    public boolean outOfBounds(int x, int y) {
        return (x < 0 || x >= getWidth() || y < 0 || y >= getHeight());
    }

    public int getWidth() {
        return grid.size();
    }

    public int getHeight() {
        return grid.get(0).size();
    }
}
